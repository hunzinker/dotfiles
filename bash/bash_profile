if [ -f ~/.bash_paths ]; then
    source ~/.bash_paths
fi

if [ -f ~/.bash_colors ]; then
    source ~/.bash_colors
fi

if [ -f ~/.bash_aliases ]; then
    source ~/.bash_aliases
fi

if [ -f ~/.bash_tmux ]; then
    source ~/.bash_tmux
fi

if [ -f $(brew --prefix)/etc/bash_completion ]; then
    source $(brew --prefix)/etc/bash_completion
fi

## RBENV ##
eval "$(rbenv init -)"

## JENV ##
eval "$(jenv init -)"

## NVM ##
source $(brew --prefix nvm)/nvm.sh

HISTCONTROL=ignoreboth

## PS1 ##
## Shell Prompt ##
__prompt_command() {
    EXIT="$?"
    PS1=""

    if [ $EXIT -eq 0 ]; then
        PS1+="${green}[\!] "
    else
        PS1+="${red}[\!] "
    fi

    # If logged in via ssh shows the ip of the server
    if [ -n "$SSH_CLIENT" ]; then
        IFS=" " read -ra SERVER_IP <<< ${SSH_CONNECTION}
        PS1+="${yellow}("${SERVER_IP[2]}") "
    fi

    PS1+="${bold_purple}\W "

    # Add rbenv to prompt
    # PS1+="${yellow}$(rbenv version | sed -e 's/ .*//') "

    # Add jenv to prompt
    PS1+="${yellow}$(cat $HOME/.jenv/version | sed -e 's/ .*//') "

    # Check if inside git repo
    local git_status="$(git status -unormal 2>&1)"
    if ! [[ "$git_status" =~ not\ a\ git\ repo ]]; then
        # Parse the porcelain output of git status
        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
            local Color_On=${green}
        elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
            local Color_On=${purple}
        else
            local Color_On=${red}
        fi

        if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
            branch=${BASH_REMATCH[1]}
        else
            # Detached HEAD. (branch=HEAD is a faster alternative.)
            branch="$(git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD)"
        fi

        # Add the result to prompt
        PS1+="${Color_On}[${branch}] "
    fi

    PS1+="${normal}\$ "
}

## Execute __prompt_command every time PS1 is printed ##
PROMPT_COMMAND=__prompt_command


vpn_connect() {
    service=$1
    echo -n "VPN Password: "
    read -s secret

    /usr/bin/env osascript <<EOF
        tell application "System Events"
            tell current location of network preferences
                set VPN to service "${service}"
                if exists VPN then connect VPN
                    repeat while (current configuration of VPN is not connected)
                    delay 1
                    keystroke "${secret}"
                    keystroke return
                    delay 7
                end repeat
            end tell
        end tell
EOF

    echo ""
}

vpn_disconnect() {
    service=$1
    /usr/bin/env osascript <<EOF
        tell application "System Events"
            tell current location of network preferences
                set VPN to service "${service}"
                if exists VPN then disconnect VPN
            end tell
        end tell
EOF
}

bru() {
    brew update && brew upgrade && brew cleanup && brew cask upgrade
}

ipaddress() {
    echo $(curl -s ipecho.net/plain)
}

flushcache() {
    sudo killall -HUP mDNSResponder && \
        say "cache flushed all around me. cream. get the money."
}

docker_cleanup() {
    docker rm \
        $(docker ps -qa --no-trunc --filter "status=exited" 2> /dev/null) \
        2> /dev/null
    docker rmi \
        $(docker images --filter "dangling=true" -q --no-trunc 2> /dev/null) \
        2> /dev/null
}
